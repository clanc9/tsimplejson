<%@ jet
imports="
      org.talend.core.model.process.IConnection
      org.talend.core.model.process.INode
      org.talend.core.model.metadata.IMetadataTable
      org.talend.core.model.process.ElementParameterParser
      org.talend.core.model.metadata.IMetadataColumn
      org.talend.designer.codegen.config.CodeGeneratorArgument
      org.talend.core.model.process.IConnectionCategory
      java.util.List
      java.util.Map
      java.util.HashMap
      java.util.HashSet
      java.util.Set
      java.util.ArrayList
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String incomingConnName = null;
List<? extends IConnection> inConns = node.getIncomingConnections();
Set<String> inColumnSet = new HashSet<String>();
if(inConns != null && inConns.size() > 0) {
    for(IConnection inConn : inConns) {
        if(inConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            incomingConnName = inConn.getName();
            IMetadataTable inputMetadataTable = inConn.getMetadataTable();
            for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
                if (inputCol != null) {//
                    inColumnSet.add(inputCol.getLabel());
                }
            }
            break;
        }
    }
}

String inputJsonColumn = ElementParameterParser.getValue(node, "__INPUT_JSON_COLUMN__");

ArrayList<String> excludedColumns = new ArrayList<String>();
List<Map<String, String>> excludedColumnsParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COLUMNS_TO_EXCLUDE__");
for (Map<String, String> excludedColParam : excludedColumnsParams) {
      String col = excludedColParam.get("OUTPUT_COLUMN");
      if (col.length() > 0) {
          excludedColumns.add(col);
     }
}

String excludeInputJsonColumnStr = ElementParameterParser.getValue(node, "__EXCLUDE_INPUT_JSON_COLUMN__");
boolean excludeInputJsonColumn = (excludeInputJsonColumnStr!=null&&!("").equals(excludeInputJsonColumnStr))?("true").equals(excludeInputJsonColumnStr):false;
if (excludeInputJsonColumn && inputJsonColumn != null && inputJsonColumn.length() > 0) {
    excludedColumns.add(inputJsonColumn);
}

String rejectOnExceptionStr = ElementParameterParser.getValue(node, "__REJECT_ON_EXCEPTION__");
boolean rejectOnException = (rejectOnExceptionStr!=null&&!("").equals(rejectOnExceptionStr))?("true").equals(rejectOnExceptionStr):false;

String nullOnExceptionStr = ElementParameterParser.getValue(node, "__NULL_ON_EXCEPTION__");
boolean nullOnException = (nullOnExceptionStr!=null&&!("").equals(nullOnExceptionStr))?("true").equals(nullOnExceptionStr):false;

String dieOnExceptionStr = ElementParameterParser.getValue(node, "__DIE_ON_EXCEPTION__");
boolean dieOnException = (dieOnExceptionStr!=null&&!("").equals(dieOnExceptionStr))?("true").equals(dieOnExceptionStr):false;

String decimalSeparator = ".";
String decimalSeparatorParam = ElementParameterParser.getValue(node, "__DECIMAL_SEPARATOR__");
if (decimalSeparatorParam != null && decimalSeparatorParam.length() == 1) {
    decimalSeparator = decimalSeparatorParam;
}

String datePatternInJson = "yyyy-MM-dd HH:mm:ss";
String datePatternInJsonParam = ElementParameterParser.getValue(node, "__DATE_PATTERN_IN_JSON__");
if (datePatternInJsonParam != null && datePatternInJsonParam.replace("\"", "").length() > 0) {
    datePatternInJson = datePatternInJsonParam.replace("\"", "");
}

List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
if(outgoingConns != null && outgoingConns.size() > 0) {
    for(IConnection outgoingConn : outgoingConns) {
        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { %>
            <%=outgoingConn.getName()%> = null;
    <%  }
    }
}

boolean jsonFlow = false;
String outgoingConnJSONName = null;
List<? extends IConnection> outgoingConnsJSON = node.getOutgoingConnections("JSON");
if (outgoingConnsJSON != null && outgoingConnsJSON.size() > 0) {
    for (IConnection outgoingConnJSON : outgoingConnsJSON) {
        if (outgoingConnJSON.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
              outgoingConnJSONName = outgoingConnJSON.getName();
              jsonFlow = true;
              break;
        }
    }
}

boolean rejectFlow = false;
String outgoingConnRejectName = null;
List<? extends IConnection> outgoingConnsReject = node.getOutgoingConnections("REJECT");
if (outgoingConnsReject != null && outgoingConnsReject.size() > 0) {
    for (IConnection outgoingConnReject : outgoingConnsReject) {
        if (outgoingConnReject.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
              outgoingConnRejectName = outgoingConnReject.getName();
              rejectFlow = true;
              break;
        }
    }
}

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if(metadatas != null && metadatas.size() > 0) {
    IMetadataTable metadata = metadatas.get(0);
    if(metadata != null) {
        columnList = metadata.getListColumns();
    }
}



%>

com.fasterxml.jackson.databind.ObjectMapper mapper_<%=cid%> = new com.fasterxml.jackson.databind.ObjectMapper();
com.fasterxml.jackson.databind.JsonNode inputJson_<%=cid%> = null;

<%  if(incomingConnName != null && columnList != null && columnList.size() > 0) {

        if (jsonFlow) {  %>
            <%=outgoingConnJSONName%> = new <%=outgoingConnJSONName%>Struct();
        <%  }  %>

        try {

            if (<%=incomingConnName%>.<%=inputJsonColumn%> != null) {
                String inputJsonStr_<%=cid%> = <%=incomingConnName%>.<%=inputJsonColumn%>.toString();
                inputJson_<%=cid%> = mapper_<%=cid%>.readTree(inputJsonStr_<%=cid%>);
            }
            else {
                inputJson_<%=cid%> = mapper_<%=cid%>.readTree("{}");
            }
          <%
           for(int i = 0 ; i < columnList.size() ; i++) {
               String colLabel = columnList.get(i).getLabel();
               if (!(excludedColumns.contains(colLabel))) {  %>

                     com.fasterxml.jackson.databind.JsonNode node_<%=cid%>_<%=i%> = inputJson_<%=cid%>.get("<%=colLabel%>");
                     if (node_<%=cid%>_<%=i%> != null && node_<%=cid%>_<%=i%>.isValueNode()
                                && !node_<%=cid%>_<%=i%>.isNull() && node_<%=cid%>_<%=i%>.asText().length() > 0) {

                        String node_asText_<%=cid%>_<%=i%> = node_<%=cid%>_<%=i%>.asText();

                  <%
                        String type = columnList.get(i).getTalendType();
                        if (type.equals("id_Integer") || type.equals("id_Short") || type.equals("id_Long") || type.equals("id_Float") || type.equals("id_Double")) {
                             String convert = type.replace("id_", ""); %>
                             try {
                                  <%=convert%> x_<%=cid%>_<%=i%> = <%=convert%>.valueOf(node_asText_<%=cid%>_<%=i%>.trim().replace("<%=decimalSeparator%>", "."));
                          <%      if (jsonFlow) {  %>
                                      <%=outgoingConnJSONName%>.<%=colLabel%> = x_<%=cid%>_<%=i%>;
                        <%        }  %>
                             }
                             catch (Exception e) {
                                 throw new Exception("Invalid <%=convert.toLowerCase()%> value in input JSON: " + e.getMessage());
                             }
                   <%    }
                         else if (type.equals("id_Boolean")) { %>
                             if (node_asText_<%=cid%>_<%=i%>.trim().toLowerCase().equals("true") || node_asText_<%=cid%>_<%=i%>.trim().equals("1")) {
                              <%  if (jsonFlow) {  %>
                                      <%=outgoingConnJSONName%>.<%=colLabel%>  = true;
                              <%  }  %>
                             }
                             else if (node_asText_<%=cid%>_<%=i%>.trim().toLowerCase().equals("false") || node_asText_<%=cid%>_<%=i%>.trim().equals("0")) {
                             <%  if (jsonFlow) {  %>
                                     <%=outgoingConnJSONName%>.<%=colLabel%>  = false;
                             <%  }  %>
                             }
                             else {
                                 throw new Exception("Invalid boolean value in input JSON: " + node_asText_<%=cid%>_<%=i%>);
                             }
                   <%    }
                         else if (type.equals("id_BigDecimal")) { %>
                             try {
                                  BigDecimal y_<%=cid%>_<%=i%> = new java.math.BigDecimal(node_asText_<%=cid%>_<%=i%>.trim().replace("<%=decimalSeparator%>", "."));
                            <%    if (jsonFlow) {   %>
                                      <%=outgoingConnJSONName%>.<%=colLabel%>  = y_<%=cid%>_<%=i%>;
                        <%        }   %>
                             }
                             catch (Exception e) {
                                 throw new Exception("Invalid Big Decimal value in input JSON: " + e.getMessage());
                             }
                   <%    }
                         else if (type.equals("id_Date")) { %>
                             if (TalendDate.isDate(node_asText_<%=cid%>_<%=i%>.trim(), "<%=datePatternInJson%>")) {
                            <%   if (jsonFlow) {  %>
                                    <%=outgoingConnJSONName%>.<%=colLabel%> = TalendDate.parseDate("<%=datePatternInJson%>", node_asText_<%=cid%>_<%=i%>.trim());
                            <%   }  %>
                             }
                             else {
                                 throw new Exception("Invalid date value in input JSON: " + node_asText_<%=cid%>_<%=i%>);
                             }
                 <%      }
                         else if (jsonFlow) { %>
                                <%=outgoingConnJSONName%>.<%=colLabel%> = node_asText_<%=cid%>_<%=i%>;
                  <%     } %>
                   }
                   else {
                      <%     if (inColumnSet.contains(colLabel) && jsonFlow) {  %>
                                 <%=outgoingConnJSONName%>.<%=colLabel%> = <%=incomingConnName%>.<%=colLabel%>;
                       <%    }
                             else if (jsonFlow) {  %>
                                 <%=outgoingConnJSONName%>.<%=colLabel%> = null;
                       <%    }  %>
                   }
            <%   }
                 // excluded columns
                 else {
                     if (inColumnSet.contains(colLabel) && jsonFlow) {  %>
                         <%=outgoingConnJSONName%>.<%=colLabel%> = <%=incomingConnName%>.<%=colLabel%>;
               <%    }
                     else if (jsonFlow) {  %>
                         <%=outgoingConnJSONName%>.<%=colLabel%> = null;
               <%    }
                 }
          }  %>

          nb_line_ok_<%=cid%>++;
 <%
          if (rejectFlow) {  %>
              <%=outgoingConnRejectName%> = null;
      <%  }  %>
    }
    catch (Exception e) {
    <%  if (dieOnException) { %>
            throw e;
    <%  }
        else { %>
            nb_line_error_<%=cid%>++;

      <%    if (rejectOnException && rejectFlow) {  %>
                  <%=outgoingConnRejectName%> = new <%=outgoingConnRejectName%>Struct();
          <%      for(int l = 0 ; l < columnList.size() ; l++) {
                      String colLabelTris = columnList.get(l).getLabel();
                      if (inColumnSet.contains(colLabelTris)) { %>
                          <%=outgoingConnRejectName%>.<%=colLabelTris%> = <%=incomingConnName%>.<%=colLabelTris%>;
                  <%  }
                      else {  %>
                          <%=outgoingConnRejectName%>.<%=colLabelTris%> = null;
                  <%  }
                 }  %>
                 <%=outgoingConnRejectName%>.errorMessage = e.getMessage();
         <%      if (jsonFlow) {  %>
                         <%=outgoingConnJSONName%> = null;
         <%      }
            }
            else if (nullOnException && jsonFlow) {
                for(int m = 0 ; m < columnList.size() ; m++) {
                    String colLabelQuatro = columnList.get(m).getLabel();
                    if (inColumnSet.contains(colLabelQuatro)) { %>
                        <%=outgoingConnJSONName%>.<%=colLabelQuatro%> = <%=incomingConnName%>.<%=colLabelQuatro%>;
                <%  }
                    else {  %>
                        <%=outgoingConnJSONName%>.<%=colLabelQuatro%> = null;
                <%  }
               }
               if (rejectFlow) {  %>
                  <%=outgoingConnRejectName%> = null;
        <%     }
            }
            else if (jsonFlow) {  %>
                <%=outgoingConnJSONName%> = null;
      <%    }
        } %>
    }
    nb_line_<%=cid%>++ ;
<%
}
%>
